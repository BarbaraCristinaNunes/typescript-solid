{"mappings":"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","sources":["SOLID/3.I/old.ts"],"sourcesContent":["interface UserAuth {\r\n    checkPassword(password: string) : boolean;\r\n    resetPassword();\r\n    setGoogleToken(token : string);\r\n    checkGoogleLogin(token : string) : boolean;\r\n    setFacebookToken(token : string);\r\n    getFacebookLogin(token : string) : boolean;\r\n}\r\n\r\ninterface AdminAuth{\r\n    checkPassword(password: string) : boolean;\r\n    resetPassword();\r\n}\r\n\r\ninterface BotAuth{\r\n    setGoogleToken(token : string);\r\n    checkGoogleLogin(token : string) : boolean;\r\n}\r\nclass User implements UserAuth {\r\n    private _password : string = 'user';\r\n    private _facebookToken : string;\r\n    private _googleToken : string;\r\n\r\n    //Interesting detail here: while I did not define a return type or param type, any deviation from the interface will give you an error.\r\n    // Test it out by uncommenting the code below.\r\n    checkGoogleLogin(token) {\r\n        // return \"this will not work\";\r\n        return (token === this._googleToken);\r\n    }\r\n\r\n    setGoogleToken(token : string) {\r\n        this._googleToken = token;\r\n    }\r\n\r\n    getFacebookLogin(token) {\r\n        return (token === this._facebookToken);\r\n    }\r\n\r\n    setFacebookToken(token : string) {\r\n        this._facebookToken = token;\r\n    }\r\n\r\n    checkPassword(password: string) : boolean {\r\n        return (password === this._password);\r\n    }\r\n\r\n    resetPassword() {\r\n        this._password = prompt('What is your new password?');\r\n    }\r\n}\r\n\r\n//admin cannot use google or facebook token\r\nclass Admin implements AdminAuth {\r\n    private _password : string = 'admin';\r\n\r\n    checkPassword(password: string): boolean {\r\n        return (password === this._password);\r\n    }\r\n    \r\n    resetPassword() {\r\n        this._password = prompt('What is your new password?');\r\n    }\r\n}\r\n\r\nclass GoogleBot implements BotAuth {\r\n    private _googleToken : string;\r\n\r\n    checkGoogleLogin(token) {\r\n        // return \"this will not work\";\r\n        return (token === this._googleToken);\r\n    }\r\n\r\n    setGoogleToken(token : string) {\r\n        this._googleToken = token;\r\n    }\r\n}\r\n\r\nconst passwordElement = <HTMLInputElement>document.querySelector('#password');\r\nconst typePasswordElement = <HTMLInputElement>document.querySelector('#typePassword');\r\nconst typeGoogleElement = <HTMLInputElement>document.querySelector('#typeGoogle');\r\nconst typeFacebookElement = <HTMLInputElement>document.querySelector('#typeFacebook');\r\nconst loginAsAdminElement = <HTMLInputElement>document.querySelector('#loginAsAdmin');\r\nconst resetPasswordElement = <HTMLAnchorElement>document.querySelector('#resetPassword');\r\n\r\nlet guest = new User;\r\nlet admin = new Admin;\r\nlet bot = new GoogleBot;\r\n\r\ndocument.querySelector('#login-form').addEventListener('submit', (event) => {\r\n    event.preventDefault();\r\n\r\n    let user = loginAsAdminElement.checked ? admin : guest;\r\n\r\n    if(!loginAsAdminElement.checked) {\r\n        user.setGoogleToken('secret_token_google');\r\n        user.setFacebookToken('secret_token_fb');\r\n    }\r\n    debugger;\r\n\r\n    let auth = false;\r\n    switch(true) {\r\n        case typePasswordElement.checked:\r\n            auth = user.checkPassword(passwordElement.value);\r\n            break;\r\n        case typeGoogleElement.checked:\r\n            auth = user.checkGoogleLogin('secret_token_google');\r\n            break;\r\n        case typeFacebookElement.checked:\r\n            debugger;\r\n            auth = user.getFacebookLogin('secret_token_fb');\r\n            break;\r\n    }\r\n\r\n    if(auth) {\r\n        alert('login success');\r\n    } else {\r\n        alert('login failed');\r\n    }\r\n});\r\n\r\nresetPasswordElement.addEventListener('click', (event) => {\r\n   event.preventDefault();\r\n\r\n   let user = loginAsAdminElement.checked ? admin : guest;\r\n   user.resetPassword();\r\n});"],"names":[],"version":3,"file":"index.eede742e.js.map","sourceRoot":"/__parcel_source_root/"}